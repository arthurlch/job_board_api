// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: experience.sql

package db

import (
	"context"
	"database/sql"
)

const createExperience = `-- name: CreateExperience :one

INSERT INTO Experience (
  job_seeker_id,
  title,
  company,
  location,
  start_date,
  end_date,
  description,
  created_at,
  updated_at
) VALUES (
  $1, -- job_seeker_id
  $2, -- title
  $3, -- company
  $4, -- location
  $5, -- start_date
  $6, -- end_date
  $7, -- description
  CURRENT_TIMESTAMP, -- created_at
  CURRENT_TIMESTAMP -- updated_at
) RETURNING id
`

type CreateExperienceParams struct {
	JobSeekerID sql.NullInt32  `json:"job_seeker_id"`
	Title       sql.NullString `json:"title"`
	Company     sql.NullString `json:"company"`
	Location    sql.NullString `json:"location"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	Description sql.NullString `json:"description"`
}

// experience.sql
func (q *Queries) CreateExperience(ctx context.Context, arg CreateExperienceParams) (int32, error) {
	row := q.queryRow(ctx, q.createExperienceStmt, createExperience,
		arg.JobSeekerID,
		arg.Title,
		arg.Company,
		arg.Location,
		arg.StartDate,
		arg.EndDate,
		arg.Description,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteExperience = `-- name: DeleteExperience :exec

DELETE FROM Experience
WHERE id = $1
`

// Specify the condition for updating, such as the "id" column
func (q *Queries) DeleteExperience(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteExperienceStmt, deleteExperience, id)
	return err
}

const getExperiences = `-- name: GetExperiences :many
SELECT id, job_seeker_id, title, company, location, start_date, end_date, description, created_at, updated_at FROM Experience
`

func (q *Queries) GetExperiences(ctx context.Context) ([]Experience, error) {
	rows, err := q.query(ctx, q.getExperiencesStmt, getExperiences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Experience
	for rows.Next() {
		var i Experience
		if err := rows.Scan(
			&i.ID,
			&i.JobSeekerID,
			&i.Title,
			&i.Company,
			&i.Location,
			&i.StartDate,
			&i.EndDate,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExperience = `-- name: UpdateExperience :exec
UPDATE Experience
SET title = $1, company = $2, location = $3, start_date = $4, end_date = $5, description = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $7
`

type UpdateExperienceParams struct {
	Title       sql.NullString `json:"title"`
	Company     sql.NullString `json:"company"`
	Location    sql.NullString `json:"location"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	Description sql.NullString `json:"description"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateExperience(ctx context.Context, arg UpdateExperienceParams) error {
	_, err := q.exec(ctx, q.updateExperienceStmt, updateExperience,
		arg.Title,
		arg.Company,
		arg.Location,
		arg.StartDate,
		arg.EndDate,
		arg.Description,
		arg.ID,
	)
	return err
}
