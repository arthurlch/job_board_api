// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: education.sql

package db

import (
	"context"
	"database/sql"
)

const deleteEducation = `-- name: DeleteEducation :exec
DELETE FROM Education WHERE id = $1
`

func (q *Queries) DeleteEducation(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteEducationStmt, deleteEducation, id)
	return err
}

const getEducations = `-- name: GetEducations :many
SELECT id, job_seeker_id, institution_id, degree, field_of_study, start_date, end_date, created_at, updated_at FROM Education
`

func (q *Queries) GetEducations(ctx context.Context) ([]Education, error) {
	rows, err := q.query(ctx, q.getEducationsStmt, getEducations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Education
	for rows.Next() {
		var i Education
		if err := rows.Scan(
			&i.ID,
			&i.JobSeekerID,
			&i.InstitutionID,
			&i.Degree,
			&i.FieldOfStudy,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEducation = `-- name: InsertEducation :exec
INSERT INTO Education (
  job_seeker_id, institution_id, degree, field_of_study, start_date, end_date, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
) RETURNING id
`

type InsertEducationParams struct {
	JobSeekerID   sql.NullInt32  `json:"job_seeker_id"`
	InstitutionID sql.NullInt32  `json:"institution_id"`
	Degree        sql.NullString `json:"degree"`
	FieldOfStudy  sql.NullString `json:"field_of_study"`
	StartDate     sql.NullTime   `json:"start_date"`
	EndDate       sql.NullTime   `json:"end_date"`
}

func (q *Queries) InsertEducation(ctx context.Context, arg InsertEducationParams) error {
	_, err := q.exec(ctx, q.insertEducationStmt, insertEducation,
		arg.JobSeekerID,
		arg.InstitutionID,
		arg.Degree,
		arg.FieldOfStudy,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const updateEducation = `-- name: UpdateEducation :exec
UPDATE Education SET institution_id = $1, degree = $2, field_of_study = $3, start_date = $4, end_date = $5, updated_at = CURRENT_TIMESTAMP WHERE id = $6
`

type UpdateEducationParams struct {
	InstitutionID sql.NullInt32  `json:"institution_id"`
	Degree        sql.NullString `json:"degree"`
	FieldOfStudy  sql.NullString `json:"field_of_study"`
	StartDate     sql.NullTime   `json:"start_date"`
	EndDate       sql.NullTime   `json:"end_date"`
	ID            int32          `json:"id"`
}

func (q *Queries) UpdateEducation(ctx context.Context, arg UpdateEducationParams) error {
	_, err := q.exec(ctx, q.updateEducationStmt, updateEducation,
		arg.InstitutionID,
		arg.Degree,
		arg.FieldOfStudy,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
	return err
}
