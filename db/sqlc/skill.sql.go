// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: skill.sql

package db

import (
	"context"
	"database/sql"
)

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM Skill WHERE id = $1
`

func (q *Queries) DeleteSkill(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteSkillStmt, deleteSkill, id)
	return err
}

const insertSkill = `-- name: InsertSkill :exec
INSERT INTO Skill (name) VALUES ($1) RETURNING id
`

func (q *Queries) InsertSkill(ctx context.Context, name sql.NullString) error {
	_, err := q.exec(ctx, q.insertSkillStmt, insertSkill, name)
	return err
}

const selectAllSkills = `-- name: SelectAllSkills :many
SELECT id, name FROM Skill
`

func (q *Queries) SelectAllSkills(ctx context.Context) ([]Skill, error) {
	rows, err := q.query(ctx, q.selectAllSkillsStmt, selectAllSkills)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSkillByID = `-- name: SelectSkillByID :one
SELECT id, name FROM Skill WHERE id = $1
`

func (q *Queries) SelectSkillByID(ctx context.Context, id int32) (Skill, error) {
	row := q.queryRow(ctx, q.selectSkillByIDStmt, selectSkillByID, id)
	var i Skill
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateSkill = `-- name: UpdateSkill :exec
UPDATE Skill SET name = $1 WHERE id = $2
`

type UpdateSkillParams struct {
	Name sql.NullString `json:"name"`
	ID   int32          `json:"id"`
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) error {
	_, err := q.exec(ctx, q.updateSkillStmt, updateSkill, arg.Name, arg.ID)
	return err
}
