// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: experiencetype.sql

package db

import (
	"context"
	"database/sql"
)

const deleteExperienceType = `-- name: DeleteExperienceType :exec
DELETE FROM ExperienceType WHERE id = $1
`

func (q *Queries) DeleteExperienceType(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteExperienceTypeStmt, deleteExperienceType, id)
	return err
}

const insertExperienceType = `-- name: InsertExperienceType :exec
INSERT INTO ExperienceType (name)
VALUES ($1)
RETURNING id
`

func (q *Queries) InsertExperienceType(ctx context.Context, name sql.NullString) error {
	_, err := q.exec(ctx, q.insertExperienceTypeStmt, insertExperienceType, name)
	return err
}

const selectAllExperienceTypes = `-- name: SelectAllExperienceTypes :many
SELECT id, name FROM ExperienceType
`

func (q *Queries) SelectAllExperienceTypes(ctx context.Context) ([]Experiencetype, error) {
	rows, err := q.query(ctx, q.selectAllExperienceTypesStmt, selectAllExperienceTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Experiencetype
	for rows.Next() {
		var i Experiencetype
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectExperienceTypeByID = `-- name: SelectExperienceTypeByID :one
SELECT id, name FROM ExperienceType WHERE id = $1
`

func (q *Queries) SelectExperienceTypeByID(ctx context.Context, id int32) (Experiencetype, error) {
	row := q.queryRow(ctx, q.selectExperienceTypeByIDStmt, selectExperienceTypeByID, id)
	var i Experiencetype
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateExperienceType = `-- name: UpdateExperienceType :exec
UPDATE ExperienceType SET name = $1 WHERE id = $2
`

type UpdateExperienceTypeParams struct {
	Name sql.NullString `json:"name"`
	ID   int32          `json:"id"`
}

func (q *Queries) UpdateExperienceType(ctx context.Context, arg UpdateExperienceTypeParams) error {
	_, err := q.exec(ctx, q.updateExperienceTypeStmt, updateExperienceType, arg.Name, arg.ID)
	return err
}
