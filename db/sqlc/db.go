// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCompanyStmt, err = db.PrepareContext(ctx, createCompany); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCompany: %w", err)
	}
	if q.createEducationStmt, err = db.PrepareContext(ctx, createEducation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEducation: %w", err)
	}
	if q.createExperienceStmt, err = db.PrepareContext(ctx, createExperience); err != nil {
		return nil, fmt.Errorf("error preparing query CreateExperience: %w", err)
	}
	if q.createJobStmt, err = db.PrepareContext(ctx, createJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJob: %w", err)
	}
	if q.createJobSeekerStmt, err = db.PrepareContext(ctx, createJobSeeker); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJobSeeker: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCompanyStmt, err = db.PrepareContext(ctx, deleteCompany); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCompany: %w", err)
	}
	if q.deleteEducationStmt, err = db.PrepareContext(ctx, deleteEducation); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEducation: %w", err)
	}
	if q.deleteExperienceStmt, err = db.PrepareContext(ctx, deleteExperience); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExperience: %w", err)
	}
	if q.deleteJobStmt, err = db.PrepareContext(ctx, deleteJob); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJob: %w", err)
	}
	if q.deleteJobSeekerStmt, err = db.PrepareContext(ctx, deleteJobSeeker); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJobSeeker: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getCompaniesStmt, err = db.PrepareContext(ctx, getCompanies); err != nil {
		return nil, fmt.Errorf("error preparing query GetCompanies: %w", err)
	}
	if q.getEducationsStmt, err = db.PrepareContext(ctx, getEducations); err != nil {
		return nil, fmt.Errorf("error preparing query GetEducations: %w", err)
	}
	if q.getExperiencesStmt, err = db.PrepareContext(ctx, getExperiences); err != nil {
		return nil, fmt.Errorf("error preparing query GetExperiences: %w", err)
	}
	if q.getJobSeekersStmt, err = db.PrepareContext(ctx, getJobSeekers); err != nil {
		return nil, fmt.Errorf("error preparing query GetJobSeekers: %w", err)
	}
	if q.getJobsStmt, err = db.PrepareContext(ctx, getJobs); err != nil {
		return nil, fmt.Errorf("error preparing query GetJobs: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.updateCompanyStmt, err = db.PrepareContext(ctx, updateCompany); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCompany: %w", err)
	}
	if q.updateEducationStmt, err = db.PrepareContext(ctx, updateEducation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEducation: %w", err)
	}
	if q.updateExperienceStmt, err = db.PrepareContext(ctx, updateExperience); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateExperience: %w", err)
	}
	if q.updateJobStmt, err = db.PrepareContext(ctx, updateJob); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJob: %w", err)
	}
	if q.updateJobSeekerStmt, err = db.PrepareContext(ctx, updateJobSeeker); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJobSeeker: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCompanyStmt != nil {
		if cerr := q.createCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCompanyStmt: %w", cerr)
		}
	}
	if q.createEducationStmt != nil {
		if cerr := q.createEducationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEducationStmt: %w", cerr)
		}
	}
	if q.createExperienceStmt != nil {
		if cerr := q.createExperienceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createExperienceStmt: %w", cerr)
		}
	}
	if q.createJobStmt != nil {
		if cerr := q.createJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobStmt: %w", cerr)
		}
	}
	if q.createJobSeekerStmt != nil {
		if cerr := q.createJobSeekerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobSeekerStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCompanyStmt != nil {
		if cerr := q.deleteCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCompanyStmt: %w", cerr)
		}
	}
	if q.deleteEducationStmt != nil {
		if cerr := q.deleteEducationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEducationStmt: %w", cerr)
		}
	}
	if q.deleteExperienceStmt != nil {
		if cerr := q.deleteExperienceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExperienceStmt: %w", cerr)
		}
	}
	if q.deleteJobStmt != nil {
		if cerr := q.deleteJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobStmt: %w", cerr)
		}
	}
	if q.deleteJobSeekerStmt != nil {
		if cerr := q.deleteJobSeekerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobSeekerStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getCompaniesStmt != nil {
		if cerr := q.getCompaniesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCompaniesStmt: %w", cerr)
		}
	}
	if q.getEducationsStmt != nil {
		if cerr := q.getEducationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEducationsStmt: %w", cerr)
		}
	}
	if q.getExperiencesStmt != nil {
		if cerr := q.getExperiencesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExperiencesStmt: %w", cerr)
		}
	}
	if q.getJobSeekersStmt != nil {
		if cerr := q.getJobSeekersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobSeekersStmt: %w", cerr)
		}
	}
	if q.getJobsStmt != nil {
		if cerr := q.getJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobsStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.updateCompanyStmt != nil {
		if cerr := q.updateCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCompanyStmt: %w", cerr)
		}
	}
	if q.updateEducationStmt != nil {
		if cerr := q.updateEducationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEducationStmt: %w", cerr)
		}
	}
	if q.updateExperienceStmt != nil {
		if cerr := q.updateExperienceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateExperienceStmt: %w", cerr)
		}
	}
	if q.updateJobStmt != nil {
		if cerr := q.updateJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobStmt: %w", cerr)
		}
	}
	if q.updateJobSeekerStmt != nil {
		if cerr := q.updateJobSeekerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobSeekerStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	createCompanyStmt    *sql.Stmt
	createEducationStmt  *sql.Stmt
	createExperienceStmt *sql.Stmt
	createJobStmt        *sql.Stmt
	createJobSeekerStmt  *sql.Stmt
	createUserStmt       *sql.Stmt
	deleteCompanyStmt    *sql.Stmt
	deleteEducationStmt  *sql.Stmt
	deleteExperienceStmt *sql.Stmt
	deleteJobStmt        *sql.Stmt
	deleteJobSeekerStmt  *sql.Stmt
	deleteUserStmt       *sql.Stmt
	getCompaniesStmt     *sql.Stmt
	getEducationsStmt    *sql.Stmt
	getExperiencesStmt   *sql.Stmt
	getJobSeekersStmt    *sql.Stmt
	getJobsStmt          *sql.Stmt
	getUsersStmt         *sql.Stmt
	updateCompanyStmt    *sql.Stmt
	updateEducationStmt  *sql.Stmt
	updateExperienceStmt *sql.Stmt
	updateJobStmt        *sql.Stmt
	updateJobSeekerStmt  *sql.Stmt
	updateUserStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		createCompanyStmt:    q.createCompanyStmt,
		createEducationStmt:  q.createEducationStmt,
		createExperienceStmt: q.createExperienceStmt,
		createJobStmt:        q.createJobStmt,
		createJobSeekerStmt:  q.createJobSeekerStmt,
		createUserStmt:       q.createUserStmt,
		deleteCompanyStmt:    q.deleteCompanyStmt,
		deleteEducationStmt:  q.deleteEducationStmt,
		deleteExperienceStmt: q.deleteExperienceStmt,
		deleteJobStmt:        q.deleteJobStmt,
		deleteJobSeekerStmt:  q.deleteJobSeekerStmt,
		deleteUserStmt:       q.deleteUserStmt,
		getCompaniesStmt:     q.getCompaniesStmt,
		getEducationsStmt:    q.getEducationsStmt,
		getExperiencesStmt:   q.getExperiencesStmt,
		getJobSeekersStmt:    q.getJobSeekersStmt,
		getJobsStmt:          q.getJobsStmt,
		getUsersStmt:         q.getUsersStmt,
		updateCompanyStmt:    q.updateCompanyStmt,
		updateEducationStmt:  q.updateEducationStmt,
		updateExperienceStmt: q.updateExperienceStmt,
		updateJobStmt:        q.updateJobStmt,
		updateJobSeekerStmt:  q.updateJobSeekerStmt,
		updateUserStmt:       q.updateUserStmt,
	}
}
