// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: chatbotinterview.sql

package db

import (
	"context"
	"database/sql"
)

const deleteChatbotInterview = `-- name: DeleteChatbotInterview :exec
DELETE FROM ChatbotInterview WHERE id = $1
`

func (q *Queries) DeleteChatbotInterview(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteChatbotInterviewStmt, deleteChatbotInterview, id)
	return err
}

const insertChatbotInterview = `-- name: InsertChatbotInterview :exec
INSERT INTO ChatbotInterview (job_seeker_id, job_id, status, review)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type InsertChatbotInterviewParams struct {
	JobSeekerID sql.NullInt32       `json:"job_seeker_id"`
	JobID       sql.NullInt32       `json:"job_id"`
	Status      NullInterviewStatus `json:"status"`
	Review      sql.NullString      `json:"review"`
}

func (q *Queries) InsertChatbotInterview(ctx context.Context, arg InsertChatbotInterviewParams) error {
	_, err := q.exec(ctx, q.insertChatbotInterviewStmt, insertChatbotInterview,
		arg.JobSeekerID,
		arg.JobID,
		arg.Status,
		arg.Review,
	)
	return err
}

const selectAllChatbotInterviews = `-- name: SelectAllChatbotInterviews :many
SELECT id, job_seeker_id, job_id, status, review, created_at, updated_at FROM ChatbotInterview
`

func (q *Queries) SelectAllChatbotInterviews(ctx context.Context) ([]Chatbotinterview, error) {
	rows, err := q.query(ctx, q.selectAllChatbotInterviewsStmt, selectAllChatbotInterviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chatbotinterview
	for rows.Next() {
		var i Chatbotinterview
		if err := rows.Scan(
			&i.ID,
			&i.JobSeekerID,
			&i.JobID,
			&i.Status,
			&i.Review,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectChatbotInterviewByID = `-- name: SelectChatbotInterviewByID :one
SELECT id, job_seeker_id, job_id, status, review, created_at, updated_at FROM ChatbotInterview WHERE id = $1
`

func (q *Queries) SelectChatbotInterviewByID(ctx context.Context, id int32) (Chatbotinterview, error) {
	row := q.queryRow(ctx, q.selectChatbotInterviewByIDStmt, selectChatbotInterviewByID, id)
	var i Chatbotinterview
	err := row.Scan(
		&i.ID,
		&i.JobSeekerID,
		&i.JobID,
		&i.Status,
		&i.Review,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateChatbotInterview = `-- name: UpdateChatbotInterview :exec
UPDATE ChatbotInterview SET status = $1, review = $2 WHERE id = $3
`

type UpdateChatbotInterviewParams struct {
	Status NullInterviewStatus `json:"status"`
	Review sql.NullString      `json:"review"`
	ID     int32               `json:"id"`
}

func (q *Queries) UpdateChatbotInterview(ctx context.Context, arg UpdateChatbotInterviewParams) error {
	_, err := q.exec(ctx, q.updateChatbotInterviewStmt, updateChatbotInterview, arg.Status, arg.Review, arg.ID)
	return err
}
