// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: jobviews.sql

package db

import (
	"context"
	"database/sql"
)

const insertJobView = `-- name: InsertJobView :exec
INSERT INTO JobViews (job_id, view_count)
VALUES ($1, $2)
`

type InsertJobViewParams struct {
	JobID     int32         `json:"job_id"`
	ViewCount sql.NullInt32 `json:"view_count"`
}

func (q *Queries) InsertJobView(ctx context.Context, arg InsertJobViewParams) error {
	_, err := q.exec(ctx, q.insertJobViewStmt, insertJobView, arg.JobID, arg.ViewCount)
	return err
}

const selectJobViewsByJobID = `-- name: SelectJobViewsByJobID :one
SELECT job_id, view_count FROM JobViews WHERE job_id = $1
`

func (q *Queries) SelectJobViewsByJobID(ctx context.Context, jobID int32) (Jobview, error) {
	row := q.queryRow(ctx, q.selectJobViewsByJobIDStmt, selectJobViewsByJobID, jobID)
	var i Jobview
	err := row.Scan(&i.JobID, &i.ViewCount)
	return i, err
}

const updateJobViews = `-- name: UpdateJobViews :exec
UPDATE JobViews SET view_count = $1 WHERE job_id = $2
`

type UpdateJobViewsParams struct {
	ViewCount sql.NullInt32 `json:"view_count"`
	JobID     int32         `json:"job_id"`
}

func (q *Queries) UpdateJobViews(ctx context.Context, arg UpdateJobViewsParams) error {
	_, err := q.exec(ctx, q.updateJobViewsStmt, updateJobViews, arg.ViewCount, arg.JobID)
	return err
}
