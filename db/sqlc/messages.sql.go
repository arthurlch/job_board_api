// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: messages.sql

package db

import (
	"context"
	"database/sql"
)

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM Messages WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteMessageStmt, deleteMessage, id)
	return err
}

const insertMessage = `-- name: InsertMessage :exec
INSERT INTO Messages (sender_id, receiver_id, content, sender_type)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type InsertMessageParams struct {
	SenderID   int32          `json:"sender_id"`
	ReceiverID int32          `json:"receiver_id"`
	Content    string         `json:"content"`
	SenderType sql.NullString `json:"sender_type"`
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) error {
	_, err := q.exec(ctx, q.insertMessageStmt, insertMessage,
		arg.SenderID,
		arg.ReceiverID,
		arg.Content,
		arg.SenderType,
	)
	return err
}

const selectMessagesBySenderAndReceiver = `-- name: SelectMessagesBySenderAndReceiver :many
SELECT id, sender_id, receiver_id, content, sender_type, created_at FROM Messages WHERE sender_id = $1 AND receiver_id = $2
`

type SelectMessagesBySenderAndReceiverParams struct {
	SenderID   int32 `json:"sender_id"`
	ReceiverID int32 `json:"receiver_id"`
}

func (q *Queries) SelectMessagesBySenderAndReceiver(ctx context.Context, arg SelectMessagesBySenderAndReceiverParams) ([]Message, error) {
	rows, err := q.query(ctx, q.selectMessagesBySenderAndReceiverStmt, selectMessagesBySenderAndReceiver, arg.SenderID, arg.ReceiverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.ReceiverID,
			&i.Content,
			&i.SenderType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
