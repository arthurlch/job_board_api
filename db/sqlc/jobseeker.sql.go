// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: jobseeker.sql

package db

import (
	"context"
	"database/sql"
)

const createJobSeeker = `-- name: CreateJobSeeker :one
INSERT INTO JobSeeker (
  user_id,
  created_at,
  updated_at
) VALUES (
  $1,
  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
) RETURNING id
`

// Insert
func (q *Queries) CreateJobSeeker(ctx context.Context, userID sql.NullInt32) (int32, error) {
	row := q.queryRow(ctx, q.createJobSeekerStmt, createJobSeeker, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteJobSeeker = `-- name: DeleteJobSeeker :exec
DELETE FROM JobSeeker WHERE id = $1
`

// Delete
func (q *Queries) DeleteJobSeeker(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteJobSeekerStmt, deleteJobSeeker, id)
	return err
}

const getJobSeekers = `-- name: GetJobSeekers :many
SELECT id, user_id, created_at, updated_at FROM JobSeeker
`

// Select all
func (q *Queries) GetJobSeekers(ctx context.Context) ([]Jobseeker, error) {
	rows, err := q.query(ctx, q.getJobSeekersStmt, getJobSeekers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Jobseeker
	for rows.Next() {
		var i Jobseeker
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobSeeker = `-- name: UpdateJobSeeker :exec
UPDATE JobSeeker SET user_id = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2
`

type UpdateJobSeekerParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	ID     int32         `json:"id"`
}

// Update
func (q *Queries) UpdateJobSeeker(ctx context.Context, arg UpdateJobSeekerParams) error {
	_, err := q.exec(ctx, q.updateJobSeekerStmt, updateJobSeeker, arg.UserID, arg.ID)
	return err
}
