// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: jobseekerskill.sql

package db

import (
	"context"
)

const deleteJobSeekerSkill = `-- name: DeleteJobSeekerSkill :exec
DELETE FROM JobSeekerSkill WHERE job_seeker_id = $1 AND technical_skill = $2 AND passive_skill = $3
`

type DeleteJobSeekerSkillParams struct {
	JobSeekerID    int32           `json:"job_seeker_id"`
	TechnicalSkill Technicalskills `json:"technical_skill"`
	PassiveSkill   Passiveskills   `json:"passive_skill"`
}

func (q *Queries) DeleteJobSeekerSkill(ctx context.Context, arg DeleteJobSeekerSkillParams) error {
	_, err := q.exec(ctx, q.deleteJobSeekerSkillStmt, deleteJobSeekerSkill, arg.JobSeekerID, arg.TechnicalSkill, arg.PassiveSkill)
	return err
}

const insertJobSeekerSkill = `-- name: InsertJobSeekerSkill :exec
INSERT INTO JobSeekerSkill (job_seeker_id, technical_skill, passive_skill)
VALUES ($1, $2, $3)
`

type InsertJobSeekerSkillParams struct {
	JobSeekerID    int32           `json:"job_seeker_id"`
	TechnicalSkill Technicalskills `json:"technical_skill"`
	PassiveSkill   Passiveskills   `json:"passive_skill"`
}

func (q *Queries) InsertJobSeekerSkill(ctx context.Context, arg InsertJobSeekerSkillParams) error {
	_, err := q.exec(ctx, q.insertJobSeekerSkillStmt, insertJobSeekerSkill, arg.JobSeekerID, arg.TechnicalSkill, arg.PassiveSkill)
	return err
}

const selectJobSeekerSkillsByJobSeekerID = `-- name: SelectJobSeekerSkillsByJobSeekerID :many
SELECT job_seeker_id, technical_skill, passive_skill
FROM JobSeekerSkill
WHERE job_seeker_id = $1
`

func (q *Queries) SelectJobSeekerSkillsByJobSeekerID(ctx context.Context, jobSeekerID int32) ([]Jobseekerskill, error) {
	rows, err := q.query(ctx, q.selectJobSeekerSkillsByJobSeekerIDStmt, selectJobSeekerSkillsByJobSeekerID, jobSeekerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Jobseekerskill
	for rows.Next() {
		var i Jobseekerskill
		if err := rows.Scan(&i.JobSeekerID, &i.TechnicalSkill, &i.PassiveSkill); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
