// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: job.sql

package db

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :one

INSERT INTO Job (
  title,
  description,
  requirements,
  location,
  salary,
  company_id,
  created_at,
  updated_at
) VALUES (
  $1, -- title
  $2, -- description
  $3, -- requirements
  $4, -- location
  $5, -- salary
  $6, -- company_id
  CURRENT_TIMESTAMP, -- created_at
  CURRENT_TIMESTAMP -- updated_at
) RETURNING id
`

type CreateJobParams struct {
	Title        sql.NullString `json:"title"`
	Description  sql.NullString `json:"description"`
	Requirements sql.NullString `json:"requirements"`
	Location     sql.NullString `json:"location"`
	Salary       sql.NullString `json:"salary"`
	CompanyID    sql.NullInt32  `json:"company_id"`
}

// job.sql
func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (int32, error) {
	row := q.queryRow(ctx, q.createJobStmt, createJob,
		arg.Title,
		arg.Description,
		arg.Requirements,
		arg.Location,
		arg.Salary,
		arg.CompanyID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteJob = `-- name: DeleteJob :exec

DELETE FROM Job
WHERE id = $1
`

// Specify the condition for updating, such as the "id" column
func (q *Queries) DeleteJob(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteJobStmt, deleteJob, id)
	return err
}

const getJobs = `-- name: GetJobs :many
SELECT id, title, description, requirements, location, salary, company_id, created_at, updated_at FROM Job
`

func (q *Queries) GetJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.query(ctx, q.getJobsStmt, getJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Requirements,
			&i.Location,
			&i.Salary,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :exec
UPDATE Job
SET title = $1, description = $2, requirements = $3, location = $4, salary = $5, updated_at = CURRENT_TIMESTAMP
WHERE id = $6
`

type UpdateJobParams struct {
	Title        sql.NullString `json:"title"`
	Description  sql.NullString `json:"description"`
	Requirements sql.NullString `json:"requirements"`
	Location     sql.NullString `json:"location"`
	Salary       sql.NullString `json:"salary"`
	ID           int32          `json:"id"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) error {
	_, err := q.exec(ctx, q.updateJobStmt, updateJob,
		arg.Title,
		arg.Description,
		arg.Requirements,
		arg.Location,
		arg.Salary,
		arg.ID,
	)
	return err
}
